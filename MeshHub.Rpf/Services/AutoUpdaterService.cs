using System;
using System.IO;
using System.IO.Compression;
using System.Net.Http;
using System.Text.Json;
using System.Threading;
using System.Threading.Tasks;
using AltV.Net;

namespace MeshHub.Rpf.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è MeshHub —Ä–µ—Å—É—Ä—Å–∞
    /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ—Ä—Å–∏–∏ –Ω–∞ backend –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Ä–µ—Å—É—Ä—Å
    /// </summary>
    public class AutoUpdaterService
    {
        private const int UPDATE_CHECK_INTERVAL_MS = 3600000; // 1 —á–∞—Å
        private const int INITIAL_DELAY_MS = 10000; // 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
        private const string RESOURCE_NAME = "meshhub";
        private const string SOFTWARE_NAME = "MeshHub"; // –ò–º—è —Å–æ—Ñ—Ç–∞ –Ω–∞ backend –¥–ª—è –ø–æ–∏—Å–∫–∞
        
        // Software API Key (–Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å software_)
        // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å–æ—Ñ—Ç–∞ —á–µ—Ä–µ–∑ –∞–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å
        private const string SOFTWARE_ID = "d29cd9ab-41a9-4b15-8d68-db8b8e1862c8";
        private const string API_KEY = "software_77e2ae52bda09744c445904256e63009f5f0251397f9c1a00f59657bb94711fd";
        private const string BACKEND_URL = "https://hub.feeld.space";
        
        private readonly HttpClient _httpClient;
        private readonly string _resourcePath;
        private readonly string _backupPath;
        
        private Timer? _updateCheckTimer;
        private bool _isChecking = false;
        private string _currentVersion;

        public AutoUpdaterService(string currentVersion)
        {
            _currentVersion = currentVersion;
            
            // –ü—É—Ç–∏ –∫ —Ä–µ—Å—É—Ä—Å–∞–º (–æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ —Ä–∞–±–æ—á–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ altv-server)
            var cwd = Directory.GetCurrentDirectory();
            _resourcePath = Path.Combine(cwd, "resources", RESOURCE_NAME);
            _backupPath = Path.Combine(cwd, "resources", $"{RESOURCE_NAME}.old");
            
            // –ù–∞—Å—Ç—Ä–æ–π–∫–∞ HTTP –∫–ª–∏–µ–Ω—Ç–∞
            var handler = new HttpClientHandler
            {
                ServerCertificateCustomValidationCallback = (message, cert, chain, errors) => true // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º SSL –¥–ª—è dev
            };
            
            _httpClient = new HttpClient(handler)
            {
                Timeout = TimeSpan.FromMinutes(5)
            };
            
            _httpClient.DefaultRequestHeaders.Add("X-API-Key", API_KEY);
        }

        /// <summary>
        /// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        /// –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
        /// </summary>
        public void Initialize()
        {
            Alt.Log("[AutoUpdate] üöÄ Initializing auto-updater...");
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            if (!IsConfigured())
            {
                Alt.LogWarning("[AutoUpdate] ‚ö†Ô∏è Auto-update disabled: credentials not configured");
                Alt.LogWarning("[AutoUpdate] üí° Update SOFTWARE_ID and API_KEY in AutoUpdaterService.cs");
                return;
            }
            
            Alt.Log($"[AutoUpdate] Current version: {_currentVersion}");
            Alt.Log($"[AutoUpdate] Backend URL: {BACKEND_URL}");
            Alt.Log($"[AutoUpdate] Software name: {SOFTWARE_NAME}");
            
            // –ü–µ—Ä–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 —Å–µ–∫—É–Ω–¥ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
            Task.Run(async () =>
            {
                await Task.Delay(INITIAL_DELAY_MS);
                await CheckForUpdatesAsync();
            });
            
            // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—ã–π —á–∞—Å
            _updateCheckTimer = new Timer(
                async _ => await CheckForUpdatesAsync(),
                null,
                UPDATE_CHECK_INTERVAL_MS,
                UPDATE_CHECK_INTERVAL_MS
            );
            
            Alt.Log($"[AutoUpdate] ‚úÖ Auto-updater initialized");
            Alt.Log($"[AutoUpdate] Update checks every {UPDATE_CHECK_INTERVAL_MS / 60000} minutes");
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –Ω–∞ backend
        /// –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ—Ñ—Ç –ø–æ SOFTWARE_ID
        /// </summary>
        public async Task<UpdateInfo?> CheckForUpdatesAsync()
        {
            if (_isChecking)
            {
                Alt.LogWarning("[AutoUpdate] Update check already in progress");
                return null;
            }
            
            try
            {
                _isChecking = true;
                
                Alt.Log("[AutoUpdate] üîç Checking for updates...");
                Alt.Log($"[AutoUpdate] Current version: {_currentVersion}");
                Alt.Log($"[AutoUpdate] Software ID: {MaskSecret(SOFTWARE_ID)}");
                
                // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–æ—Ñ—Ç –ø–æ ID (–±–æ–ª–µ–µ –Ω–∞–¥–µ–∂–Ω–æ —á–µ–º –ø–æ–∏—Å–∫ –ø–æ –∏–º–µ–Ω–∏)
                var url = $"{BACKEND_URL}/api/software/{SOFTWARE_ID}";
                var response = await _httpClient.GetAsync(url);
                
                if (!response.IsSuccessStatusCode)
                {
                    Alt.LogWarning($"[AutoUpdate] ‚ö†Ô∏è Failed to get software: {response.StatusCode}");
                    if (response.StatusCode == System.Net.HttpStatusCode.Unauthorized)
                    {
                        Alt.LogError("[AutoUpdate] ‚ùå API key is invalid or revoked");
                    }
                    return null;
                }
                
                var content = await response.Content.ReadAsStringAsync();
                var software = JsonSerializer.Deserialize<SoftwareInfo>(content);
                
                if (software == null)
                {
                    Alt.LogWarning("[AutoUpdate] ‚ö†Ô∏è Failed to parse software response");
                    return null;
                }
                
                var latestVersion = software.Version ?? "0.0.0";
                Alt.Log($"[AutoUpdate] ‚úÖ Found software: {software.Name}");
                Alt.Log($"[AutoUpdate] Latest version: {latestVersion}");
                Alt.Log($"[AutoUpdate] Server type: {software.ServerType}");
                
                // –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º –≤–µ—Ä—Å–∏–∏
                var comparison = CompareVersions(latestVersion, _currentVersion);
                
                if (comparison > 0)
                {
                    Alt.Log($"[AutoUpdate] üéâ New version available: {latestVersion}");
                    
                    var updateInfo = new UpdateInfo
                    {
                        Id = software.Id ?? "",
                        Version = latestVersion,
                        DownloadUrl = software.DownloadUrl ?? "",
                        FileSize = software.FileSize,
                        Name = software.Name ?? ""
                    };
                    
                    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–∫–∞—á–∏–≤–∞–µ–º –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º
                    Alt.Log($"[AutoUpdate] üöÄ Starting automatic update to version {latestVersion}...");
                    var success = await DownloadAndInstallAsync(updateInfo);
                    
                    if (success)
                    {
                        Alt.Log($"[AutoUpdate] üéâ Update to {latestVersion} completed successfully!");
                        Alt.Log("[AutoUpdate] üîÑ Please restart the server to load new version");
                    }
                    
                    return updateInfo;
                }
                else if (comparison == 0)
                {
                    Alt.Log("[AutoUpdate] ‚úÖ Already on latest version");
                }
                else
                {
                    Alt.LogWarning("[AutoUpdate] ‚ö†Ô∏è Current version is newer than backend version!");
                }
                
                return null;
            }
            catch (HttpRequestException ex)
            {
                Alt.LogError($"[AutoUpdate] ‚ùå Network error: {ex.Message}");
                return null;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[AutoUpdate] ‚ùå Update check error: {ex.Message}");
                return null;
            }
            finally
            {
                _isChecking = false;
            }
        }

        /// <summary>
        /// –°–∫–∞—á–∏–≤–∞–µ—Ç –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
        /// </summary>
        public async Task<bool> DownloadAndInstallAsync(UpdateInfo updateInfo)
        {
            try
            {
                Alt.Log($"[AutoUpdate] üì• Starting download of version {updateInfo.Version}...");
                Alt.Log($"[AutoUpdate] File size: {updateInfo.FileSize / 1024.0 / 1024.0:F2} MB");
                
                // –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏
                Alt.Log("[AutoUpdate] üíæ Creating backup of current version...");
                var backupSuccess = CreateBackup();
                
                if (!backupSuccess)
                {
                    Alt.LogError("[AutoUpdate] ‚ùå Failed to create backup, aborting update for safety");
                    return false;
                }
                
                // DownloadUrl —É–∂–µ —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è –≤ updateInfo (–ø–æ–ª—É—á–∏–ª–∏ –∏–∑ /api/software)
                // –≠—Ç–æ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å, –¥–æ–±–∞–≤–ª—è–µ–º BACKEND_URL
                var downloadUrl = updateInfo.DownloadUrl.StartsWith("http") 
                    ? updateInfo.DownloadUrl 
                    : $"{BACKEND_URL}{updateInfo.DownloadUrl}";
                    
                Alt.Log($"[AutoUpdate] Downloading from: {downloadUrl}");
                
                // –°–∫–∞—á–∏–≤–∞–µ–º ZIP —Ñ–∞–π–ª
                var downloadResponse = await _httpClient.GetAsync(downloadUrl);
                
                if (!downloadResponse.IsSuccessStatusCode)
                {
                    Alt.LogError($"[AutoUpdate] ‚ùå Download failed: {downloadResponse.StatusCode}");
                    return false;
                }
                
                var zipData = await downloadResponse.Content.ReadAsByteArrayAsync();
                
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º ZIP –≤—Ä–µ–º–µ–Ω–Ω–æ
                var tempDir = Path.Combine(Path.GetTempPath(), "meshhub_updates");
                Directory.CreateDirectory(tempDir);
                
                var zipPath = Path.Combine(tempDir, $"meshhub_{updateInfo.Version}.zip");
                await File.WriteAllBytesAsync(zipPath, zipData);
                
                Alt.Log($"[AutoUpdate] ‚úÖ Downloaded: {zipPath} ({zipData.Length / 1024.0 / 1024.0:F2} MB)");
                
                // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
                Alt.Log("[AutoUpdate] üì¶ Installing update...");
                var installSuccess = InstallUpdate(zipPath, updateInfo.Version);
                
                if (installSuccess)
                {
                    Alt.Log($"[AutoUpdate] üéâ Update to version {updateInfo.Version} installed successfully!");
                    Alt.Log("[AutoUpdate] üîÑ Please restart the server to load new version");
                    Alt.Log("[AutoUpdate] üí° Command: restart meshhub");
                    return true;
                }
                else
                {
                    Alt.LogError("[AutoUpdate] ‚ùå Installation failed, restoring backup...");
                    var restoreSuccess = RestoreBackup();
                    
                    if (restoreSuccess)
                    {
                        Alt.Log("[AutoUpdate] ‚úÖ Backup restored successfully");
                    }
                    else
                    {
                        Alt.LogError("[AutoUpdate] ‚ùå CRITICAL: Failed to restore backup!");
                    }
                    
                    return false;
                }
            }
            catch (Exception ex)
            {
                Alt.LogError($"[AutoUpdate] ‚ùå Download/Install error: {ex.Message}");
                Alt.Log("[AutoUpdate] Attempting to restore backup...");
                RestoreBackup();
                return false;
            }
        }

        /// <summary>
        /// –°–æ–∑–¥–∞–µ—Ç –±—ç–∫–∞–ø —Ç–µ–∫—É—â–µ–π –≤–µ—Ä—Å–∏–∏ (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ meshhub ‚Üí meshhub.old)
        /// </summary>
        private bool CreateBackup()
        {
            try
            {
                // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π –±—ç–∫–∞–ø –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (Directory.Exists(_backupPath))
                {
                    Alt.Log($"[AutoUpdate] Removing old backup: {_backupPath}");
                    Directory.Delete(_backupPath, true);
                }
                
                // –ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ä–µ—Å—É—Ä—Å –≤ .old
                if (Directory.Exists(_resourcePath))
                {
                    Alt.Log($"[AutoUpdate] Renaming {RESOURCE_NAME} ‚Üí {RESOURCE_NAME}.old");
                    Directory.Move(_resourcePath, _backupPath);
                    Alt.Log($"[AutoUpdate] ‚úÖ Backup created: {_backupPath}");
                    return true;
                }
                else
                {
                    Alt.LogWarning($"[AutoUpdate] ‚ö†Ô∏è Resource directory not found: {_resourcePath}");
                    return false;
                }
            }
            catch (Exception ex)
            {
                Alt.LogError($"[AutoUpdate] ‚ùå Backup creation failed: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ ZIP –∞—Ä—Ö–∏–≤–∞
        /// </summary>
        private bool InstallUpdate(string zipPath, string version)
        {
            try
            {
                Alt.Log($"[AutoUpdate] Installing update from: {zipPath}");
                
                // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è —Ä–∞—Å–ø–∞–∫–æ–≤–∫–∏
                var extractPath = Path.Combine(Path.GetTempPath(), $"meshhub_extract_{version}_{DateTime.Now.Ticks}");
                Directory.CreateDirectory(extractPath);
                
                // –†–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º ZIP
                Alt.Log("[AutoUpdate] üì¶ Extracting ZIP archive...");
                ZipFile.ExtractToDirectory(zipPath, extractPath);
                Alt.Log("[AutoUpdate] ‚úÖ ZIP extracted successfully");
                
                // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ—Å—É—Ä—Å–∞
                Directory.CreateDirectory(_resourcePath);
                
                // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã –∏–∑ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
                Alt.Log("[AutoUpdate] üîÑ Copying files...");
                CopyDirectory(extractPath, _resourcePath);
                
                Alt.Log("[AutoUpdate] ‚úÖ Files copied successfully");
                
                // –û—á–∏—â–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
                Alt.Log("[AutoUpdate] üóëÔ∏è Cleaning up temporary files...");
                try
                {
                    Directory.Delete(extractPath, true);
                    File.Delete(zipPath);
                }
                catch
                {
                    // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—á–∏—Å—Ç–∫–∏
                }
                
                Alt.Log($"[AutoUpdate] ‚úÖ Update to version {version} completed successfully");
                
                return true;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[AutoUpdate] ‚ùå Installation failed: {ex.Message}");
                Alt.LogError($"[AutoUpdate] Stack trace: {ex.StackTrace}");
                return false;
            }
        }

        /// <summary>
        /// –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –±—ç–∫–∞–ø (–ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏–µ meshhub.old ‚Üí meshhub)
        /// </summary>
        private bool RestoreBackup()
        {
            try
            {
                if (!Directory.Exists(_backupPath))
                {
                    Alt.LogError("[AutoUpdate] ‚ùå Backup directory not found, cannot restore");
                    return false;
                }
                
                Alt.Log($"[AutoUpdate] üîÑ Restoring backup from: {_backupPath}");
                
                // –£–¥–∞–ª—è–µ–º –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–Ω—É—é –≤–µ—Ä—Å–∏—é –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                if (Directory.Exists(_resourcePath))
                {
                    Directory.Delete(_resourcePath, true);
                }
                
                // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–∑ –±—ç–∫–∞–ø–∞
                Directory.Move(_backupPath, _resourcePath);
                
                Alt.Log("[AutoUpdate] ‚úÖ Backup restored successfully");
                return true;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[AutoUpdate] ‚ùå Restore failed: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ö–æ–ø–∏—Ä—É–µ—Ç –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ
        /// </summary>
        private void CopyDirectory(string sourceDir, string destinationDir)
        {
            var dir = new DirectoryInfo(sourceDir);
            
            if (!dir.Exists)
            {
                throw new DirectoryNotFoundException($"Source directory not found: {sourceDir}");
            }
            
            // –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è
            Directory.CreateDirectory(destinationDir);
            
            // –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª—ã
            foreach (FileInfo file in dir.GetFiles())
            {
                string targetPath = Path.Combine(destinationDir, file.Name);
                file.CopyTo(targetPath, true);
            }
            
            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∫–æ–ø–∏—Ä—É–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach (DirectoryInfo subDir in dir.GetDirectories())
            {
                string targetPath = Path.Combine(destinationDir, subDir.Name);
                CopyDirectory(subDir.FullName, targetPath);
            }
        }

        /// <summary>
        /// –°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç –≤–µ—Ä—Å–∏–∏ (semver)
        /// </summary>
        /// <returns>1 –µ—Å–ª–∏ v1 > v2, -1 –µ—Å–ª–∏ v1 < v2, 0 –µ—Å–ª–∏ —Ä–∞–≤–Ω—ã</returns>
        private int CompareVersions(string v1, string v2)
        {
            try
            {
                var parts1 = v1.Split('.');
                var parts2 = v2.Split('.');
                
                int maxLength = Math.Max(parts1.Length, parts2.Length);
                
                for (int i = 0; i < maxLength; i++)
                {
                    int p1 = i < parts1.Length && int.TryParse(parts1[i], out int parsed1) ? parsed1 : 0;
                    int p2 = i < parts2.Length && int.TryParse(parts2[i], out int parsed2) ? parsed2 : 0;
                    
                    if (p1 > p2) return 1;
                    if (p1 < p2) return -1;
                }
                
                return 0;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[AutoUpdate] Version comparison error: {ex.Message}");
                return 0;
            }
        }

        /// <summary>
        /// –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —á—Ç–æ credentials –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
        /// </summary>
        private bool IsConfigured()
        {
            return !string.IsNullOrEmpty(SOFTWARE_ID) && 
                   !SOFTWARE_ID.StartsWith("–ó–ê–ú–ï–ù–ò–¢–ï") &&
                   !string.IsNullOrEmpty(API_KEY) &&
                   !API_KEY.StartsWith("–ó–ê–ú–ï–ù–ò–¢–ï");
        }

        /// <summary>
        /// –ú–∞—Å–∫–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
        /// </summary>
        private string MaskSecret(string secret)
        {
            if (string.IsNullOrEmpty(secret) || secret.Length <= 8)
            {
                return "***";
            }
            
            return secret.Substring(0, 4) + "***" + secret.Substring(secret.Length - 4);
        }

        /// <summary>
        /// –û—Å–≤–æ–±–æ–∂–¥–∞–µ—Ç —Ä–µ—Å—É—Ä—Å—ã
        /// </summary>
        public void Dispose()
        {
            _updateCheckTimer?.Dispose();
            _httpClient?.Dispose();
        }

        // ==================== –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –∫–ª–∞—Å—Å—ã ====================

        /// <summary>
        /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–º –æ–±–µ—Å–ø–µ—á–µ–Ω–∏–∏ —Å backend (–∏–∑ —Å–ø–∏—Å–∫–∞ /api/software)
        /// </summary>
        private class SoftwareInfo
        {
            public string? Id { get; set; }
            public string? Name { get; set; }
            public string? Version { get; set; }
            public string? DownloadUrl { get; set; }
            public long FileSize { get; set; }
            public string? ServerType { get; set; }
            public bool IsActive { get; set; }
        }

        /// <summary>
        /// –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏
        /// </summary>
        public class UpdateInfo
        {
            public string Id { get; set; } = "";
            public string Version { get; set; } = "";
            public string DownloadUrl { get; set; } = "";
            public long FileSize { get; set; }
            public string Name { get; set; } = "";
        }
    }
}

