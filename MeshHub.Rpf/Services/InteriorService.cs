using AltV.Net;
using MeshHub.Core.GameFiles;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;

namespace MeshHub.Rpf.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∏–Ω—Ç–µ—Ä—å–µ—Ä–∞–º–∏ (MLO) –∏–∑ RPF –∞—Ä—Ö–∏–≤–æ–≤
    /// –ü–æ–∏—Å–∫ YTYP —Ñ–∞–π–ª–æ–≤ —Å CMloArchetypeDef
    /// </summary>
    public class InteriorService
    {
        private readonly RpfService _rpfService;

        public InteriorService(RpfService rpfService)
        {
            _rpfService = rpfService;
        }

        /// <summary>
        /// –ù–∞–π—Ç–∏ YTYP —Ñ–∞–π–ª —Å MLO –∞—Ä—Ö–µ—Ç–∏–ø–æ–º (CMloArchetypeDef)
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É –ø—Ä–∏ –æ–±—Ö–æ–¥–µ
        /// </summary>
        public string? FindMloYtypXml(string archiveId, string interiorName)
        {
            try
            {
                Alt.Log($"[InteriorService] üîç Searching for YTYP with CMloArchetypeDef");
                
                var rpf = _rpfService.GetRpfArchive(archiveId);
                if (rpf == null) return null;

                // –ù–∞—Ö–æ–¥–∏–º –∏ —Å—Ä–∞–∑—É –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤—Å–µ .ytyp —Ñ–∞–π–ª—ã
                var result = FindMloInYtyps(rpf, rpf.Root, "");
                
                if (result != null)
                {
                    Alt.Log($"[InteriorService] ‚úÖ Found MLO YTYP");
                    return result;
                }

                Alt.LogWarning($"[InteriorService] No MLO found");
                return null;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[InteriorService] Error: {ex.Message}");
                return null;
            }
        }
        
        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ—Ç MLO –≤ YTYP —Ñ–∞–π–ª–∞—Ö, –∏–∑–≤–ª–µ–∫–∞—è –¥–∞–Ω–Ω—ã–µ —Å—Ä–∞–∑—É
        /// </summary>
        private string? FindMloInYtyps(RpfFile rpf, RpfDirectoryEntry directory, string currentPath)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º .ytyp —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach (var file in directory.Files)
            {
                if (file.NameLower.EndsWith(".ytyp"))
                {
                    var fullPath = string.IsNullOrEmpty(currentPath) ? file.Name : $"{currentPath}/{file.Name}";
                    Alt.Log($"[InteriorService] Checking {fullPath}");
                    
                    try
                    {
                        var ytypData = rpf.ExtractFile(file);
                        if (ytypData == null) continue;

                        var ytypFile = new YtypFile(file);
                        ytypFile.Load(ytypData, file);

                        string xml;
                        if (ytypFile.Pso != null)
                        {
                            xml = PsoXml.GetXml(ytypFile.Pso);
                        }
                        else if (ytypFile.Meta != null)
                        {
                            xml = MetaXml.GetXml(ytypFile.Meta);
                        }
                        else
                        {
                            continue;
                        }

                        if (xml.Contains("CMloArchetypeDef"))
                        {
                            Alt.Log($"[InteriorService] ‚úÖ Found in {fullPath}");
                            return xml;
                        }
                    }
                    catch (Exception ex)
                    {
                        Alt.LogWarning($"[InteriorService] Error loading {fullPath}: {ex.Message}");
                    }
                }
            }

            // –†–µ–∫—É—Ä—Å–∏—è –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            foreach (var subDir in directory.Directories)
            {
                var newPath = string.IsNullOrEmpty(currentPath) ? subDir.Name : $"{currentPath}/{subDir.Name}";
                var result = FindMloInYtyps(rpf, subDir, newPath);
                if (result != null) return result;
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RPF
            foreach (var file in directory.Files)
            {
                if (file.NameLower.EndsWith(".rpf"))
                {
                    try
                    {
                        var nestedData = rpf.ExtractFile(file);
                        if (nestedData == null) continue;

                        var tempPath = Path.GetTempFileName();
                        File.WriteAllBytes(tempPath, nestedData);
                        
                        try
                        {
                            var nestedRpf = new RpfFile(tempPath, file.Name);
                            using (var fs = new FileStream(tempPath, FileMode.Open, FileAccess.Read))
                            using (var br = new BinaryReader(fs))
                            {
                                var readHeaderMethod = typeof(RpfFile).GetMethod("ReadHeader", 
                                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                                readHeaderMethod?.Invoke(nestedRpf, new object[] { br });
                            }
                            
                            var newPath = string.IsNullOrEmpty(currentPath) ? file.Name : $"{currentPath}/{file.Name}";
                            var result = FindMloInYtyps(nestedRpf, nestedRpf.Root, newPath);
                            if (result != null) return result;
                        }
                        finally
                        {
                            if (File.Exists(tempPath))
                                File.Delete(tempPath);
                        }
                    }
                    catch (Exception ex)
                    {
                        Alt.LogWarning($"[InteriorService] Error in nested RPF {file.Name}: {ex.Message}");
                    }
                }
            }
            
            return null;
        }

        private YtypFile? LoadYtypFile(RpfFile rpf, RpfFileEntry entry)
        {
            try
            {
                var data = rpf.ExtractFile(entry);
                if (data == null) return null;

                var ytypFile = new YtypFile(entry);
                ytypFile.Load(data, null);
                return ytypFile;
            }
            catch
            {
                return null;
            }
        }

        private MloArchetype? FindAnyMloArchetype(YtypFile ytypFile)
        {
            foreach (var archetype in ytypFile.AllArchetypes)
            {
                if (archetype is MloArchetype mlo)
                {
                    return mlo; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø–µ—Ä–≤—ã–π –Ω–∞–π–¥–µ–Ω–Ω—ã–π MLO
                }
            }
            return null;
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –Ω–∞—Ö–æ–¥–∏—Ç –≤—Å–µ .ytyp —Ñ–∞–π–ª—ã —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ RpfFileEntry –æ–±—ä–µ–∫—Ç–∞–º–∏
        /// </summary>
        private void FindYtypEntries(RpfFile rpf, RpfDirectoryEntry directory, string currentPath, List<(RpfFile, RpfFileEntry, string)> ytypEntries)
        {
            // –ò—â–µ–º .ytyp —Ñ–∞–π–ª—ã
            foreach (var file in directory.Files)
            {
                if (file.NameLower.EndsWith(".ytyp"))
                {
                    var fullPath = string.IsNullOrEmpty(currentPath) ? file.Name : $"{currentPath}/{file.Name}";
                    ytypEntries.Add((rpf, file, fullPath));
                    Alt.Log($"[InteriorService] Found YTYP: {fullPath}");
                }
            }

            // –†–µ–∫—É—Ä—Å–∏—è –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            foreach (var subDir in directory.Directories)
            {
                var newPath = string.IsNullOrEmpty(currentPath) ? subDir.Name : $"{currentPath}/{subDir.Name}";
                FindYtypEntries(rpf, subDir, newPath, ytypEntries);
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–µ RPF
            foreach (var file in directory.Files)
            {
                if (file.NameLower.EndsWith(".rpf"))
                {
                    try
                    {
                        var nestedData = rpf.ExtractFile(file);
                        if (nestedData == null) continue;

                        var tempPath = Path.GetTempFileName();
                        File.WriteAllBytes(tempPath, nestedData);
                        
                        try
                        {
                            var nestedRpf = new RpfFile(tempPath, file.Name);
                            using (var fs = new FileStream(tempPath, FileMode.Open, FileAccess.Read))
                            using (var br = new BinaryReader(fs))
                            {
                                var readHeaderMethod = typeof(RpfFile).GetMethod("ReadHeader", 
                                    System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                                readHeaderMethod?.Invoke(nestedRpf, new object[] { br });
                            }
                            
                            var newPath = string.IsNullOrEmpty(currentPath) ? file.Name : $"{currentPath}/{file.Name}";
                            
                            // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –≤—Å–µ –∏–º–µ–Ω–∞ –∏–∑ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ RPF
                            if (ModuleMain.JenkIndexService != null)
                            {
                                ModuleMain.JenkIndexService.IndexRpfArchive(nestedRpf);
                            }
                            
                            FindYtypEntries(nestedRpf, nestedRpf.Root, newPath, ytypEntries);
                        }
                        finally
                        {
                            if (File.Exists(tempPath))
                                File.Delete(tempPath);
                        }
                    }
                    catch (Exception ex)
                    {
                        Alt.LogWarning($"[InteriorService] Error processing nested RPF {file.Name}: {ex.Message}");
                    }
                }
            }
        }

        /// <summary>
        /// –°—Ç–∞—Ä—ã–π –º–µ—Ç–æ–¥ FindYtypPaths (–æ—Å—Ç–∞–≤–ª–µ–Ω –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        /// </summary>
        private void FindYtypPaths(RpfDirectoryEntry directory, string currentPath, List<string> ytypPaths)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã
            foreach (var file in directory.Files)
            {
                var fullPath = string.IsNullOrEmpty(currentPath) 
                    ? file.Name 
                    : $"{currentPath}/{file.Name}";
                
                if (file.NameLower.EndsWith(".ytyp"))
                {
                    ytypPaths.Add(fullPath);
                    Alt.Log($"[InteriorService] Found YTYP: {fullPath}");
                }
                // –í–ª–æ–∂–µ–Ω–Ω—ã–π RPF - –∑–∞—Ö–æ–¥–∏–º –≤–Ω—É—Ç—Ä—å
                else if (file.NameLower.EndsWith(".rpf"))
                {
                    try
                    {
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π RPF
                        var nestedData = file.File.ExtractFile(file);
                        if (nestedData != null)
                        {
                            // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
                            var tempPath = Path.GetTempFileName();
                            File.WriteAllBytes(tempPath, nestedData);
                            
                            try
                            {
                                // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π RPF
                                var nestedRpf = new RpfFile(tempPath, file.Name);
                                using (var fs = new FileStream(tempPath, FileMode.Open, FileAccess.Read))
                                using (var br = new BinaryReader(fs))
                                {
                                    var readHeaderMethod = typeof(RpfFile).GetMethod("ReadHeader", 
                                        System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                                    readHeaderMethod?.Invoke(nestedRpf, new object[] { br });
                                }
                                
                                // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –∏—â–µ–º –≤–Ω—É—Ç—Ä–∏
                                FindYtypPaths(nestedRpf.Root, fullPath, ytypPaths);
                            }
                            finally
                            {
                                if (File.Exists(tempPath))
                                    File.Delete(tempPath);
                            }
                        }
                    }
                    catch (Exception ex)
                    {
                        Alt.LogWarning($"[InteriorService] Error processing nested RPF {file.Name}: {ex.Message}");
                    }
                }
            }

            // –†–µ–∫—É—Ä—Å–∏—è –ø–æ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è–º
            foreach (var subDir in directory.Directories)
            {
                var newPath = string.IsNullOrEmpty(currentPath) 
                    ? subDir.Name 
                    : $"{currentPath}/{subDir.Name}";
                FindYtypPaths(subDir, newPath, ytypPaths);
            }
        }

        /// <summary>
        /// –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç YtypFile –≤ XML —Å—Ç—Ä–æ–∫—É
        /// </summary>
        private string GetYtypXml(YtypFile ytypFile)
        {
            try
            {
                var sb = new StringBuilder();
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º XML –∏–∑ YtypFile
                // –ò—Å–ø–æ–ª—å–∑—É–µ–º GetXml –º–µ—Ç–æ–¥ –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω, –∏–Ω–∞—á–µ —Å—Ç—Ä–æ–∏–º –≤—Ä—É—á–Ω—É—é
                
                sb.AppendLine("<?xml version=\"1.0\" encoding=\"UTF-8\"?>");
                sb.AppendLine("<CMapTypes>");
                
                // Extensions
                sb.AppendLine("  <extensions />");
                
                // Archetypes
                if (ytypFile.AllArchetypes != null && ytypFile.AllArchetypes.Length > 0)
                {
                    sb.AppendLine("  <archetypes>");
                    
                    foreach (var archetype in ytypFile.AllArchetypes)
                    {
                        // –ü–æ–ª—É—á–∞–µ–º XML –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞—Ä—Ö–µ—Ç–∏–ø–∞
                        var archetypeXml = GetArchetypeXml(archetype);
                        sb.AppendLine(archetypeXml);
                    }
                    
                    sb.AppendLine("  </archetypes>");
                }
                else
                {
                    sb.AppendLine("  <archetypes />");
                }
                
                // Name
                var nameStr = JenkIndex.TryGetString(ytypFile.NameHash);
                if (!string.IsNullOrEmpty(nameStr))
                {
                    sb.AppendLine($"  <name>{nameStr}</name>");
                }
                else
                {
                    sb.AppendLine("  <name />");
                }
                
                // Dependencies
                sb.AppendLine("  <dependencies />");
                
                sb.AppendLine("</CMapTypes>");
                
                return sb.ToString();
            }
            catch (Exception ex)
            {
                Alt.LogError($"[InteriorService] ‚ùå Error converting YTYP to XML: {ex.Message}");
                return "<?xml version=\"1.0\"?><CMapTypes><error>Failed to convert YTYP to XML</error></CMapTypes>";
            }
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç XML –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –∞—Ä—Ö–µ—Ç–∏–ø–∞
        /// </summary>
        private string GetArchetypeXml(Archetype archetype)
        {
            var sb = new StringBuilder();
            
            if (archetype is MloArchetype mloArch)
            {
                sb.AppendLine("    <Item type=\"CMloArchetypeDef\">");
                sb.AppendLine($"      <name>{JenkIndex.TryGetString(mloArch.Hash)}</name>");
                sb.AppendLine($"      <lodDist value=\"{mloArch.LodDist}\" />");
                
                if (mloArch.entities != null && mloArch.entities.Length > 0)
                {
                    sb.AppendLine("      <entities>");
                    foreach (var entity in mloArch.entities)
                    {
                        var data = entity._Data;
                        sb.AppendLine("        <Item type=\"CEntityDef\">");
                        sb.AppendLine($"          <archetypeName>{JenkIndex.TryGetString(data.archetypeName)}</archetypeName>");
                        sb.AppendLine($"          <flags value=\"{data.flags}\" />");
                        sb.AppendLine($"          <guid value=\"{data.guid}\" />");
                        sb.AppendLine($"          <position x=\"{data.position.X}\" y=\"{data.position.Y}\" z=\"{data.position.Z}\" />");
                        sb.AppendLine($"          <rotation x=\"{data.rotation.X}\" y=\"{data.rotation.Y}\" z=\"{data.rotation.Z}\" w=\"{data.rotation.W}\" />");
                        sb.AppendLine("        </Item>");
                    }
                    sb.AppendLine("      </entities>");
                }
                else
                {
                    sb.AppendLine("      <entities />");
                }
                
                if (mloArch.entitySets != null && mloArch.entitySets.Length > 0)
                {
                    sb.AppendLine("      <entitySets>");
                    foreach (var entitySet in mloArch.entitySets)
                    {
                        sb.AppendLine("        <Item>");
                        sb.AppendLine($"          <name>{JenkIndex.TryGetString(entitySet._Data.name)}</name>");
                        sb.AppendLine("        </Item>");
                    }
                    sb.AppendLine("      </entitySets>");
                }
                
                sb.AppendLine("    </Item>");
            }
            else
            {
                sb.AppendLine("    <Item type=\"CBaseArchetypeDef\">");
                sb.AppendLine($"      <name>{JenkIndex.TryGetString(archetype.Hash)}</name>");
                sb.AppendLine($"      <lodDist value=\"{archetype.LodDist}\" />");
                sb.AppendLine("    </Item>");
            }
            
            return sb.ToString();
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å Entity Sets –∏–∑ MLO
        /// </summary>
        public string[]? GetMloEntitySets(string archiveId, string interiorName)
        {
            try
            {
                Alt.Log($"[InteriorService] üì¶ Getting entity sets from MLO");
                
                // –°–Ω–∞—á–∞–ª–∞ –Ω–∞–π–¥–µ–º YTYP —Å MLO
                var ytypXml = FindMloYtypXml(archiveId, interiorName);
                if (ytypXml == null) return Array.Empty<string>();

                // –ü—Ä–æ—Å—Ç–æ–π –ø–∞—Ä—Å–∏–Ω–≥ entity sets –∏–∑ XML
                var entitySets = new List<string>();
                var lines = ytypXml.Split('\n');
                bool inEntitySets = false;
                
                foreach (var line in lines)
                {
                    if (line.Contains("<entitySets>"))
                    {
                        inEntitySets = true;
                    }
                    else if (line.Contains("</entitySets>"))
                    {
                        break;
                    }
                    else if (inEntitySets && line.Contains("<name>"))
                    {
                        var start = line.IndexOf("<name>") + 6;
                        var end = line.IndexOf("</name>");
                        if (end > start)
                        {
                            entitySets.Add(line.Substring(start, end - start));
                        }
                    }
                }

                Alt.Log($"[InteriorService] ‚úÖ Found {entitySets.Count} entity sets");
                return entitySets.ToArray();
            }
            catch (Exception ex)
            {
                Alt.LogError($"[InteriorService] Error: {ex.Message}");
                return null;
            }
        }
    }
}

