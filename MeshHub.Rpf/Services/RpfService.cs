using AltV.Net;
using MeshHub.Core.GameFiles;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace MeshHub.Rpf.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RPF –∞—Ä—Ö–∏–≤–∞–º–∏
    /// –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—É–±–ª–∏—á–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç
    /// </summary>
    public class RpfService
    {
        private readonly Dictionary<string, RpfFile> _openedArchives = new();
        private readonly Dictionary<string, bool> _scannedArchives = new(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã

        /// <summary>
        /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç RPF –∞—Ä—Ö–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID
        /// </summary>
        public string? OpenRpfArchive(string rpfPath)
        {
            try
            {
                if (!File.Exists(rpfPath))
                {
                    Alt.LogError($"[RpfService] RPF file not found: {rpfPath}");
                    return null;
                }

                var archiveId = Guid.NewGuid().ToString();
                var rpf = new RpfFile(rpfPath, Path.GetFileName(rpfPath));
                
                // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ç–æ–ª—å–∫–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫ (–±–µ–∑ —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö RPF)
                using (var fs = File.OpenRead(rpfPath))
                using (var br = new BinaryReader(fs))
                {
                    // –í—ã–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–∞—Ç–Ω—ã–π –º–µ—Ç–æ–¥ ReadHeader —á–µ—Ä–µ–∑ —Ä–µ—Ñ–ª–µ–∫—Å–∏—é
                    var readHeaderMethod = typeof(RpfFile).GetMethod("ReadHeader", 
                        System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                    
                    if (readHeaderMethod != null)
                    {
                        readHeaderMethod.Invoke(rpf, new object[] { br });
                        Alt.Log($"[RpfService] ‚úÖ Loaded RPF header: {rpfPath}");
                    }
                    else
                    {
                        Alt.LogError($"[RpfService] Failed to find ReadHeader method!");
                    }
                }
                
                _openedArchives[archiveId] = rpf;
                _scannedArchives[archiveId] = false;
                
                Alt.Log($"[RpfService] ‚úÖ Opened RPF: {rpfPath} (ID: {archiveId})");
                
                // –ò–Ω–¥–µ–∫—Å–∏—Ä—É–µ–º –∏–º–µ–Ω–∞ —Ñ–∞–π–ª–æ–≤ –¥–ª—è JenkIndex
                if (ModuleMain.JenkIndexService != null)
                {
                    ModuleMain.JenkIndexService.IndexRpfArchive(rpf);
                }
                
                return archiveId;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error opening RPF: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π RPF –∞—Ä—Ö–∏–≤
        /// </summary>
        public bool CloseRpfArchive(string archiveId)
        {
            if (_openedArchives.Remove(archiveId))
            {
                _scannedArchives.Remove(archiveId); // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                Alt.Log($"[RpfService] ‚úÖ Closed RPF archive: {archiveId}");
                return true;
            }
            return false;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ RPF –∞—Ä—Ö–∏–≤–µ
        /// </summary>
        public string[]? ListRpfFiles(string archiveId)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return null;
            }

            try
            {
                // –ù–ï –°–ö–ê–ù–ò–†–£–ï–ú –∞—Ä—Ö–∏–≤ –¥–ª—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤ - —Å–ª–∏—à–∫–æ–º —Ç—è–∂–µ–ª–æ!
                // –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –±–æ–ª—å—à–µ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è –ø–æ–∏—Å–∫–∞ .yft
                Alt.LogWarning($"[RpfService] ListRpfFiles –≤—ã–∑–≤–∞–Ω, –Ω–æ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è mesh –¥–∞–Ω–Ω—ã—Ö");
                return Array.Empty<string>();
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error listing files: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ RPF –∞—Ä—Ö–∏–≤–∞
        /// </summary>
        public byte[]? ExtractFile(string archiveId, string filePath)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return null;
            }

            try
            {
                // –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—É—Ç—å - –∑–∞–º–µ–Ω—è–µ–º backslash –Ω–∞ forward slash
                var normalizedPath = filePath.Replace('\\', '/');
                
                // –í–ê–ñ–ù–û: –ï—Å–ª–∏ –ø—É—Ç—å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å –∏–º–µ–Ω–∏ –∞—Ä—Ö–∏–≤–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä "dlc.rpf/common/data/handling.meta")
                // –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å —ç—Ç–æ—Ç –ø—Ä–µ—Ñ–∏–∫—Å, —Ç–∞–∫ –∫–∞–∫ –º—ã —É–∂–µ –≤–Ω—É—Ç—Ä–∏ —ç—Ç–æ–≥–æ –∞—Ä—Ö–∏–≤–∞
                if (normalizedPath.StartsWith(rpf.NameLower + "/", StringComparison.OrdinalIgnoreCase))
                {
                    normalizedPath = normalizedPath.Substring(rpf.NameLower.Length + 1);
                    Alt.Log($"[RpfService] üîß Removed archive name prefix, new path: {normalizedPath}");
                }
                
                // –†–∞–∑–±–∏–≤–∞–µ–º –ø—É—Ç—å –Ω–∞ —á–∞—Å—Ç–∏
                var pathParts = normalizedPath.Split('/');
                var currentDir = rpf.Root;
                RpfEntry? currentEntry = null;
                RpfFile currentRpf = rpf;

                // –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –∫–∞–∂–¥–æ–π —á–∞—Å—Ç–∏ –ø—É—Ç–∏
                for (int i = 0; i < pathParts.Length; i++)
                {
                    var part = pathParts[i];
                    if (string.IsNullOrEmpty(part)) continue;

                    // –õ–æ–≥–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã –¥–ª—è –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
                    // Alt.Log($"[RpfService] üîç Checking part: {part}");

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ currentDir —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                    if (currentDir == null)
                    {
                        Alt.LogError($"[RpfService] Current directory is null!");
                        return null;
                    }

                    // –ï—Å–ª–∏ —ç—Ç–æ –ø–æ—Å–ª–µ–¥–Ω—è—è —á–∞—Å—Ç—å - –∏—â–µ–º —Ñ–∞–π–ª
                    if (i == pathParts.Length - 1)
                    {
                        if (currentDir.Files == null)
                        {
                            Alt.LogError($"[RpfService] Files collection is null!");
                            return null;
                        }

                        currentEntry = currentDir.Files
                            .FirstOrDefault(f => f.Name.Equals(part, StringComparison.OrdinalIgnoreCase));

                        if (currentEntry == null)
                        {
                            Alt.LogError($"[RpfService] File not found: {part}");
                            return null;
                        }
                        break;
                    }

                    // –ò—â–µ–º —Å–ª–µ–¥—É—é—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –∏–ª–∏ RPF —Ñ–∞–π–ª
                    RpfEntry? nextEntry = null;
                    
                    if (currentDir.Files != null)
                    {
                        nextEntry = currentDir.Files
                            .FirstOrDefault(f => f.Name.Equals(part, StringComparison.OrdinalIgnoreCase));
                    }
                        
                    if (nextEntry == null && currentDir.Directories != null)
                    {
                        nextEntry = currentDir.Directories
                            .FirstOrDefault(d => d.Name.Equals(part, StringComparison.OrdinalIgnoreCase));
                    }

                    if (nextEntry == null)
                    {
                        Alt.LogError($"[RpfService] Entry not found: {part}");
                        return null;
                    }

                    // –ï—Å–ª–∏ —ç—Ç–æ RPF —Ñ–∞–π–ª - –æ—Ç–∫—Ä—ã–≤–∞–µ–º –µ–≥–æ
                    if (nextEntry is RpfFileEntry rpfEntry && part.EndsWith(".rpf", StringComparison.OrdinalIgnoreCase))
                    {
                        Alt.Log($"[RpfService] üì¶ Opening nested RPF: {part}");
                        
                        // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π RPF
                        var nestedRpfData = currentRpf.ExtractFile(rpfEntry);
                        if (nestedRpfData == null)
                        {
                            Alt.LogError($"[RpfService] Failed to extract nested RPF: {part}");
                            return null;
                        }

                        // –°–æ–∑–¥–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –¥–ª—è –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ RPF
                        var tempPath = Path.GetTempFileName();
                        File.WriteAllBytes(tempPath, nestedRpfData);

                        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –≤–ª–æ–∂–µ–Ω–Ω—ã–π RPF
                        currentRpf = new RpfFile(tempPath, part);
                        
                        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –≤–ª–æ–∂–µ–Ω–Ω–æ–≥–æ RPF
                        using (var nestedFs = new MemoryStream(nestedRpfData))
                        using (var nestedBr = new BinaryReader(nestedFs))
                        {
                            var readHeaderMethod = typeof(RpfFile).GetMethod("ReadHeader", 
                                System.Reflection.BindingFlags.NonPublic | System.Reflection.BindingFlags.Instance);
                            
                            if (readHeaderMethod != null)
                            {
                                readHeaderMethod.Invoke(currentRpf, new object[] { nestedBr });
                                Alt.Log($"[RpfService] ‚úÖ Loaded nested RPF header: {part}");
                            }
                        }
                        
                        currentDir = currentRpf.Root;

                        Alt.Log($"[RpfService] ‚úÖ Opened nested RPF: {part}");
                    }
                    else if (nextEntry is RpfDirectoryEntry dirEntry)
                    {
                        currentDir = dirEntry;
                    }
                    else
                    {
                        Alt.LogError($"[RpfService] Invalid entry type for: {part}");
                        return null;
                    }
                }

                // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –Ω–∞—à–ª–∏ —Ñ–∞–π–ª
                if (currentEntry is not RpfFileEntry fileEntry)
                {
                    Alt.LogError($"[RpfService] File not found or invalid type: {filePath}");
                    return null;
                }

                var data = currentRpf.ExtractFile(fileEntry);
                Alt.Log($"[RpfService] ‚úÖ Extracted file: {filePath} ({data?.Length ?? 0} bytes)");
                return data;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error extracting file: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ó–∞–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ RPF –∞—Ä—Ö–∏–≤–µ
        /// </summary>
        public bool ReplaceFile(string archiveId, string filePath, byte[] newContent)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return false;
            }

            try
            {
                var entry = rpf.AllEntries
                    .FirstOrDefault(e => e.Path.Equals(filePath, StringComparison.OrdinalIgnoreCase));

                if (entry is not RpfFileEntry fileEntry)
                {
                    Alt.LogError($"[RpfService] File not found: {filePath}");
                    return false;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                if (fileEntry.Parent is not RpfDirectoryEntry parentDir)
                {
                    Alt.LogError($"[RpfService] Parent directory not found for: {filePath}");
                    return false;
                }

                // –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
                // CreateFile —É–∂–µ –≤—ã–∑—ã–≤–∞–µ—Ç InsertFileSpace ‚Üí EnsureAllEntries ‚Üí WriteHeader
                // –≠—Ç–æ –æ–±–Ω–æ–≤–ª—è–µ—Ç –∑–∞–≥–æ–ª–æ–≤–æ–∫ RPF –∏ –∑–∞–ø–∏—Å—ã–≤–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –Ω–∞ –¥–∏—Å–∫
                RpfFile.CreateFile(parentDir, fileEntry.Name, newContent, overwrite: true);
                
                Alt.Log($"[RpfService] ‚úÖ Replaced file: {filePath} ({newContent.Length} bytes)");
                return true;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error replacing file: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ –ø–æ –∏–º–µ–Ω–∏ (–ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –¥–µ—Ä–µ–≤—É)
        /// </summary>
        public string? FindFileInArchive(string archiveId, string fileName)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return null;
            }

            try
            {
                // –ù–ï –°–ö–ê–ù–ò–†–£–ï–ú! –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –Ω–∞–ø—Ä—è–º—É—é
                Alt.Log($"[RpfService] üîç Searching for '{fileName}' (–±–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)...");
                
                // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª –±–µ–∑ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
                var found = FindFileRecursive(rpf.Root, fileName);
                
                if (found != null)
                {
                    Alt.Log($"[RpfService] ‚úÖ Found: {found.Path}");
                    return found.Path;
                }

                Alt.LogWarning($"[RpfService] ‚ö†Ô∏è '{fileName}' not found");
                return null;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error finding file: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ RPF (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        /// </summary>
        private RpfEntry? FindFileRecursive(RpfDirectoryEntry directory, string fileName)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach (var entry in directory.Files)
            {
                if (entry.Name.Equals(fileName, StringComparison.OrdinalIgnoreCase))
                {
                    return entry;
                }
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach (var subDir in directory.Directories)
            {
                var found = FindFileRecursive(subDir, fileName);
                if (found != null)
                {
                    return found;
                }
            }

            return null;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å RPF –∞—Ä—Ö–∏–≤ –ø–æ ID (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
        /// </summary>
        internal RpfFile? GetRpfArchive(string archiveId)
        {
            return _openedArchives.TryGetValue(archiveId, out var rpf) ? rpf : null;
        }
    }
}

        internal RpfFile? GetRpfArchive(string archiveId)
        {
            return _openedArchives.TryGetValue(archiveId, out var rpf) ? rpf : null;
        }
    }
}
