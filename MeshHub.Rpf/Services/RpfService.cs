using AltV.Net;
using MeshHub.Core.GameFiles;
using System;
using System.IO;
using System.Collections.Generic;
using System.Linq;

namespace MeshHub.Rpf.Services
{
    /// <summary>
    /// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å RPF –∞—Ä—Ö–∏–≤–∞–º–∏
    /// –í—Å–µ –º–µ—Ç–æ–¥—ã –ø—É–±–ª–∏—á–Ω—ã–µ –∏ –¥–æ—Å—Ç—É–ø–Ω—ã —á–µ—Ä–µ–∑ —ç–∫—Å–ø–æ—Ä—Ç
    /// </summary>
    public class RpfService
    {
        private readonly Dictionary<string, RpfFile> _openedArchives = new();
        private readonly Dictionary<string, bool> _scannedArchives = new(); // –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∞—Ä—Ö–∏–≤—ã

        /// <summary>
        /// –û—Ç–∫—Ä—ã–≤–∞–µ—Ç RPF –∞—Ä—Ö–∏–≤ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –µ–≥–æ ID
        /// </summary>
        public string? OpenRpfArchive(string rpfPath)
        {
            try
            {
                if (!File.Exists(rpfPath))
                {
                    Alt.LogError($"[RpfService] RPF file not found: {rpfPath}");
                    return null;
                }

                var archiveId = Guid.NewGuid().ToString();
                var rpf = new RpfFile(rpfPath, Path.GetFileName(rpfPath));
                
                // –ù–ï —Å–∫–∞–Ω–∏—Ä—É–µ–º –∞—Ä—Ö–∏–≤ —Å—Ä–∞–∑—É - –ª–µ–Ω–∏–≤–∞—è –∑–∞–≥—Ä—É–∑–∫–∞!
                // –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–∏–∑–æ–π–¥–µ—Ç —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
                _openedArchives[archiveId] = rpf;
                _scannedArchives[archiveId] = false; // –ü–æ–º–µ—á–∞–µ–º –∫–∞–∫ –Ω–µ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π
                
                Alt.Log($"[RpfService] ‚úÖ Opened RPF: {rpfPath} (ID: {archiveId}) - lazy loading enabled");
                return archiveId;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error opening RPF: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ó–∞–∫—Ä—ã–≤–∞–µ—Ç –æ—Ç–∫—Ä—ã—Ç—ã–π RPF –∞—Ä—Ö–∏–≤
        /// </summary>
        public bool CloseRpfArchive(string archiveId)
        {
            if (_openedArchives.Remove(archiveId))
            {
                _scannedArchives.Remove(archiveId); // –£–±–∏—Ä–∞–µ–º –∏–∑ —Å–ø–∏—Å–∫–∞ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö
                Alt.Log($"[RpfService] ‚úÖ Closed RPF archive: {archiveId}");
                return true;
            }
            return false;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ —Ñ–∞–π–ª–æ–≤ –≤ RPF –∞—Ä—Ö–∏–≤–µ
        /// </summary>
        public string[]? ListRpfFiles(string archiveId)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return null;
            }

            try
            {
                var files = rpf.AllEntries
                    .Where(e => e is RpfFileEntry)
                    .Select(e => e.Path)
                    .ToArray();

                Alt.Log($"[RpfService] ‚úÖ Listed {files.Length} files from archive: {archiveId}");
                return files;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error listing files: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ò–∑–≤–ª–µ–∫–∞–µ—Ç —Ñ–∞–π–ª –∏–∑ RPF –∞—Ä—Ö–∏–≤–∞
        /// </summary>
        public byte[]? ExtractFile(string archiveId, string filePath)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return null;
            }

            try
            {
                var entry = rpf.AllEntries
                    .FirstOrDefault(e => e.Path.Equals(filePath, StringComparison.OrdinalIgnoreCase));

                if (entry is not RpfFileEntry fileEntry)
                {
                    Alt.LogError($"[RpfService] File not found: {filePath}");
                    return null;
                }

                var data = rpf.ExtractFile(fileEntry);
                Alt.Log($"[RpfService] ‚úÖ Extracted file: {filePath} ({data?.Length ?? 0} bytes)");
                return data;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error extracting file: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –ó–∞–º–µ–Ω—è–µ—Ç —Ñ–∞–π–ª –≤ RPF –∞—Ä—Ö–∏–≤–µ
        /// </summary>
        public bool ReplaceFile(string archiveId, string filePath, byte[] newContent)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return false;
            }

            try
            {
                var entry = rpf.AllEntries
                    .FirstOrDefault(e => e.Path.Equals(filePath, StringComparison.OrdinalIgnoreCase));

                if (entry is not RpfFileEntry fileEntry)
                {
                    Alt.LogError($"[RpfService] File not found: {filePath}");
                    return false;
                }

                // –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                if (fileEntry.Parent is not RpfDirectoryEntry parentDir)
                {
                    Alt.LogError($"[RpfService] Parent directory not found for: {filePath}");
                    return false;
                }

                // –ó–∞–º–µ–Ω—è–µ–º —Ñ–∞–π–ª
                RpfFile.CreateFile(parentDir, fileEntry.Name, newContent, overwrite: true);
                
                Alt.Log($"[RpfService] ‚úÖ Replaced file: {filePath} ({newContent.Length} bytes)");
                return true;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error replacing file: {ex.Message}");
                return false;
            }
        }

        /// <summary>
        /// –ù–∞—Ö–æ–¥–∏—Ç —Ñ–∞–π–ª –≤ –∞—Ä—Ö–∏–≤–µ –ø–æ –∏–º–µ–Ω–∏ (–ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –¥–µ—Ä–µ–≤—É)
        /// </summary>
        public string? FindFileInArchive(string archiveId, string fileName)
        {
            if (!_openedArchives.TryGetValue(archiveId, out var rpf))
            {
                Alt.LogError($"[RpfService] Archive not found: {archiveId}");
                return null;
            }

            try
            {
                // –õ–ï–ù–ò–í–û–ï –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï: —Å–∫–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –∫–æ–≥–¥–∞ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª
                if (!_scannedArchives.GetValueOrDefault(archiveId, false))
                {
                    Alt.Log($"[RpfService] üìÇ Scanning archive structure (lazy loading)...");
                    rpf.ScanStructure(null, null);
                    _scannedArchives[archiveId] = true;
                    Alt.Log($"[RpfService] ‚úÖ Archive scanned");
                }
                
                Alt.Log($"[RpfService] üîç Searching for '{fileName}'...");
                
                // –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –ø–æ–∏—Å–∫ –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö –≤–ª–æ–∂–µ–Ω–Ω—ã—Ö –∞—Ä—Ö–∏–≤–æ–≤
                var found = FindFileRecursive(rpf.Root, fileName);
                
                if (found != null)
                {
                    Alt.Log($"[RpfService] ‚úÖ Found: {found.Path}");
                    return found.Path;
                }

                Alt.LogWarning($"[RpfService] ‚ö†Ô∏è '{fileName}' not found");
                return null;
            }
            catch (Exception ex)
            {
                Alt.LogError($"[RpfService] Error finding file: {ex.Message}");
                return null;
            }
        }

        /// <summary>
        /// –†–µ–∫—É—Ä—Å–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ —Ñ–∞–π–ª–∞ –≤ –¥–µ—Ä–µ–≤–µ RPF (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π)
        /// </summary>
        private RpfEntry? FindFileRecursive(RpfDirectoryEntry directory, string fileName)
        {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach (var entry in directory.Files)
            {
                if (entry.Name.Equals(fileName, StringComparison.OrdinalIgnoreCase))
                {
                    return entry;
                }
            }

            // –†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            foreach (var subDir in directory.Directories)
            {
                var found = FindFileRecursive(subDir, fileName);
                if (found != null)
                {
                    return found;
                }
            }

            return null;
        }

        /// <summary>
        /// –ü–æ–ª—É—á–∏—Ç—å RPF –∞—Ä—Ö–∏–≤ –ø–æ ID (–≤–Ω—É—Ç—Ä–µ–Ω–Ω–∏–π –º–µ—Ç–æ–¥)
        /// </summary>
        internal RpfFile? GetRpfArchive(string archiveId)
        {
            return _openedArchives.TryGetValue(archiveId, out var rpf) ? rpf : null;
        }
    }
}
